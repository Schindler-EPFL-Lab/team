# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

pr:
  - main

jobs:
- job: 'Lint'
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'

  - script: |
      python -m pip install flake8
      flake8 .
    displayName: 'Run lint tests'

- job: "Tests"
  pool:
    vmImage: "windows-latest"

  steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: "$(KNOWN_HOST)"
        sshPublicKey: "$(PUB_KEY)"
        sshKeySecureFile: "id_rsa"

    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.9"

    - task: Cache@2
      displayName: Cache Anaconda
      inputs:
        key: 'version1 | conda | "$(Agent.OS)" | pyproject.toml'
        path: $(CONDA)/envs
        cacheHitVar: CONDA_CACHE_RESTORED

    - script: |
        conda create --yes --name unittest python=3.9
        call activate unittest
        conda install pip
      displayName: "Install requirements"
      condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

    - script: |
        call activate unittest
        pip install dvc[azure]==2.9.3
      displayName: "Install DVC"
      condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

    - task: PowerShell@2
      inputs:
        targetType: "inline"
        script: |
          conda run -n unittest dvc remote add --global -d azure azure://arcodatasets
          conda run -n unittest dvc remote modify --global azure connection_string $env:ARCODATASET_CONNECTION_STRING
          conda run -n unittest python tests/tests_LfD/data/load_test_data.py
      env:
        ARCODATASET_CONNECTION_STRING: $(ARCODATASET_CONNECTION_STRING)
      displayName: "Download data"

    - script: |
        call activate unittest
        pip install -e .
      displayName: "Install arco-control"

    - script: |
        call activate unittest
        python -m unittest discover tests
      displayName: "Run tests"
